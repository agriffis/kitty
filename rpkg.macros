#!/bin/bash

function git_version {
    declare v=$(cached git_version)

    if [[ -z $v ]]; then
        # git describe --first-parent origin/master
        # v0.4.0-1080-g971e0ca90
        declare master_describe master_tag master_commits master_hash
        master_describe=$(git describe --first-parent origin/master)
        read master_tag master_commits master_hash <<<"${master_describe//-/ }"
        [[ $master_tag == v* && $master_commits -gt 0 && -n $master_hash ]] || die "failed git describe"

        # get the future kitty version from the changelog
        declare changelog_version v x rest
        changelog_version="$(awk '$1 ~ /^[0-9]+\./ && $2 ~ /^\[/{print; exit}' < docs/changelog.rst)"
        read v x rest <<<"$changelog_version"

        # remove brackets from $x
        x=${x#\[}; x=${x%\]}

        case $x in
            future)
                v="$v~$x.${master_commits}.${master_hash}" ;;
            2???-??-??)
                v="$v.0.git.${master_commits}.${master_hash}" ;;
            *)
                die "can't figure out version from changelog" ;;
        esac
    fi

    output "$v"
}

function git_revision {
    declare v=$(cached git_revision)

    if [[ -z $v ]]; then
        # count commits not on master
        v=$(git log --oneline origin/master.. | wc -l)
    fi

    output "$v"
}

function git_changelog_date {
    output "$(date +'%a %b %d %Y')"
}

function git_changelog_version {
    output "$(git_version)-$(git_revision)"
}
